#!/usr/bin/python
#
# Richard Harvey 2010/12/21
# Version 0.2
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import dns.zone, sys, getopt, os, time, datetime

dns_types = ['A', 'AAAA', 'TXT', 'CNAME', 'MX', 'PTR', 'SRV', 'SPF']
#dns_types = [ 'AAAA' ]

def help_message():
    '''Function to display a help message'''
    print '''Usage: ./bindtoroute53.py -z <ZONE_FILE> > myzone.xml 
    Start Options:
    -h -- Displays this help message
    -z -- Specify the zone file to convert (*REQUIRED*)'''
    sys.exit(0)

def get_options():
    '''Get the command line args and pass them into a dictionary'''
    try:
        options, xarguments = getopt.getopt(sys.argv[1:],'hz:')
    except getopt.error:
        print 'Error: Missing option try `aws-control.py -h\' for more information.'
        sys.exit(0)
    for a in options[:]:
        if a[0] == '-h':
            help_message()
    # Get the action
    for z in options[:]:
        if z[0] == '-z':
            zone_file = z[1]
            if os.path.isfile(zone_file):
                return {'zone_file':zone_file }
            else:
                print 'File Does Not Exist'
                sys.exit(0)

def print_header():
    '''Function to create XML headers'''
    today = datetime.date.today()
    print('<?xml version="1.0" encoding="UTF-8"?>')
    print('<ChangeResourceRecordSetsRequest xmlns="https://route53.amazonaws.com/doc/2010-10-01/">')
    print(' <ChangeBatch>')
    print('  <Comment>Generated by bindtoroute53.py on %s</Comment>' % today)
    print('  <Changes>')

def print_footer():
    '''Function to create XML footers'''
    print('  </Changes>')
    print(' </ChangeBatch>')
    print('</ChangeResourceRecordSetsRequest>')

def getzone(file_name):
    '''Function to read in the zone'''
    return dns.zone.from_file(file_name,relativize=False)

def unquie(seq):
    seen = set()
    seen_add = seen.add
    return [ x for x in seq if x not in seen and not seen_add(x)]

def create_change_request(record_type):
    '''Function to parse zone data and create a change XML record for specific record type (A, AAAA, CNAME .....)'''

    records = zone.iterate_rdatas(record_type)
    ''' Create a list of unquie records so we can group commom requests together'''
    name_list = []
    for (name, ttl, rdata) in records: 
        name_list.append(name)
    ''' Remove duplicates '''
    name_list = unquie(name_list)
    ''' This little nested loop takes care of multiple <ResourceRecord> values for a given <Name> '''
    for n in name_list:
        print('   <Change>')
        print('    <Action>CREATE</Action>')
        print('     <ResourceRecordSet>')
        print('      <Name>%s</Name>' % (n))
        print('      <Type>%s</Type>' % (record_type))
        print('      <TTL>%s</TTL>' % (ttl))
        print('      <ResourceRecords>')
        for (name, ttl, rdata) in zone.iterate_rdatas(record_type):
            if n == name:
                print('       <ResourceRecord>')
                print('        <Value>%s</Value>' % (rdata))
                print('       </ResourceRecord>')
        print('     </ResourceRecords>')
        print('    </ResourceRecordSet>')
        print('   </Change>')

def create_xml():
    '''Function to wrap all the xml generation together'''
    print_header()
    for record_type in dns_types:
        create_change_request(record_type)
    print_footer()

'''Main Program'''

options = get_options()
if not options:
    print 'Error: Missing option try `aws-control.py -h\' for more information.'
    sys.exit(0)
else:
    zone = getzone(options['zone_file'])
    create_xml()
